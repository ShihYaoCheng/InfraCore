# helm upgrade --install argocd ./charts/dz-argocd -n argocd --create-namespace
# helm upgrade --install argocd ../charts/dz-argocd -n argocd --create-namespace
# helm uninstall argocd -n argocd

# https://github.com/argoproj/argo-helm/blob/master/charts/argo-cd/values.yaml
# https://github.com/argoproj/argo-helm/blob/argo-cd-3.26.5/charts/argo-cd/values.yaml
# https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/application.yaml
server:
  # -- Deploy ArgoCD Applications within this helm release
  # @default -- `[]` (See [values.yaml])
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
  additionalApplications:
    - name: token
      namespace: argocd
      project: default
      source:
        repoURL: https://gitlab.com/gamedz/TokenServer.git
        targetRevision: sre
        path: charts/tokenserver
        helm:
          valueFiles:
            - ../values.yaml
      destination:
        server: https://kubernetes.default.svc
        namespace: token
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - PruneLast=true
          - CreateNamespace=true
    - name: user
      namespace: argocd
      project: default
      source:
        repoURL: https://gitlab.com/gamedz/userserver.git
        targetRevision: sre
        path: charts/userserver
        helm:
          valueFiles:
            - ../values.yaml
      destination:
        server: https://kubernetes.default.svc
        namespace: user
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - PruneLast=true
          - CreateNamespace=true

## Argo Configs
configs:
  # -- Repositories list to be used by applications
  ## Creates a secret for each key/value specified below to create repositories
  ## Note: the last example in the list would use a repository credential template,
  # configured under "configs.repositoryCredentials".
  repositories:
    token:
      url: https://gitlab.com/gamedz/TokenServer.git
      name: token
      type: git
      password: my-password
      username: my-username
    user:
      url: https://gitlab.com/gamedz/userserver.git
      name: user
      type: git
      password: my-password
      username: my-username


## Controller
controller:
  ## Application controller metrics configuration
  metrics:
    # -- Deploy metrics service
    enabled: true
    serviceMonitor:
      # -- Enable a prometheus ServiceMonitor
      enabled: true
      # -- Prometheus ServiceMonitor interval
      interval: 30s
      # -- Prometheus ServiceMonitor selector
      selector: {}
      # prometheus: kube-prometheus

      # -- Prometheus ServiceMonitor namespace
      namespace: "" # "monitoring"
      # -- Prometheus ServiceMonitor labels
      additionalLabels:
        release: prometheus
    rules:
      # -- Deploy a PrometheusRule for the application controller
      enabled: false
      # -- PrometheusRule.Spec for the application controller
      spec: []
      # - alert: ArgoAppMissing
      #   expr: |
      #     absent(argocd_app_info)
      #   for: 15m
      #   labels:
      #     severity: critical
      #   annotations:
      #     summary: "[ArgoCD] No reported applications"
      #     description: >
      #       ArgoCD has not reported any applications data for the past 15 minutes which
      #       means that it must be down or not functioning properly.  This needs to be
      #       resolved for this cloud to continue to maintain state.
      # - alert: ArgoAppNotSynced
      #   expr: |
      #     argocd_app_info{sync_status!="Synced"} == 1
      #   for: 12h
      #   labels:
      #     severity: warning
      #   annotations:
      #     summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
      #     description: >
      #       The application [{{`{{$labels.name}}`}} has not been synchronized for over
      #       12 hours which means that the state of this cloud has drifted away from the
      #       state inside Git.
    #   selector:
    #     prometheus: kube-prometheus
    #   namespace: monitoring
    #   additionalLabels: {}