#include:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform.gitlab-ci.yml
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform/Base.latest.gitlab-ci.yml
# https://gitlab.com/gitlab-org/terraform-images
# https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
#  - template: Terraform.gitlab-ci.yml

stages:
  - plan
  - deploy
  - cleanup


# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform/Base.latest.gitlab-ci.yml
# Terraform/Base.latest
#
# The purpose of this template is to provide flexibility to the user so
# they are able to only include the jobs that they find interesting.
#
# Therefore, this template is not supposed to run any jobs. The idea is to only
# create hidden jobs. See: https://docs.gitlab.com/ee/ci/yaml/#hide-jobs
#
# There is a more opinionated template which we suggest the users to abide,
# which is the lib/gitlab/ci/templates/Terraform.latest.gitlab-ci.yml

image:
  # https://gitlab.com/gitlab-org/terraform-images/container_registry/2018822
  name: registry.gitlab.com/gitlab-org/terraform-images/releases/1.0:v0.31.0
#  name: registry.gitlab.com/gitlab-org/terraform-images/releases/1.0:latest

#============================#
# .plan                      #
#============================#
#.plan:
#  stage: plan
#  variables:
#    TF_ROOT: ./
#    TF_STATE_NAME: default
#  cache:
#    key: "${TF_ROOT}"
#    paths:
#      - ${TF_ROOT}/.terraform/
#      - ${TF_ROOT}/.terraform.lock.hcl
##  before_script:
##    - cd ${TF_ROOT}
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
##    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
##    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#  script:
#    - gitlab-terraform --version
#    - gitlab-terraform init
#    - gitlab-terraform validate
#
#    # -var-file=filename  Load variable values from the given file, in addition
#    #                      to the default files terraform.tfvars and *.auto.tfvars.
#    #                      Use this option more than once to include more than one
#    #                      variables file.
#    # -input=true         Ask for input for variables if not directly set.
#    # -out=path           Write a plan file to the given path. This can be used as
#    #                      input to the "apply" command.
#
#    # plan_cache="plan.cache"
#    # terraform "${@}" -input=false -out="${plan_cache}
#    - gitlab-terraform plan -var-file=var_file
#
#    # https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
#    # terraform show -json "${plan_cache}" | jq -r "${JQ_PLAN}" > "${plan_json}"
#    # terraform show: Show the current state or a saved plan
#    # https://stedolan.github.io/jq/
#    # jq- jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
#    - gitlab-terraform plan-json -var-file=var_file
#  resource_group: ${TF_STATE_NAME}
#  artifacts:
#    paths:
#      # The [gitlab-terraform plan] creates this file.
#      - ${TF_ROOT}/plan.cache
#    reports:
#      # The [gitlab-terraform plan-json] creates this file.
#      terraform: ${TF_ROOT}/plan.json
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#      when: manual


.plan:
  stage: plan
  variables:
    TF_ROOT: ./
    TF_STATE_NAME: default
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl
    #  before_script:
    #    - cd ${TF_ROOT}
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
  #    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
  #    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      # The [gitlab-terraform plan] creates this file.
      - ${TF_ROOT}/plan.cache
    reports:
      # The [gitlab-terraform plan-json] creates this file.
      terraform: ${TF_ROOT}/plan.json
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual


.plan.with.var.file:
  extends: .plan
  script:
    - gitlab-terraform --version
    - gitlab-terraform init
    - gitlab-terraform validate

    # -var-file=filename  Load variable values from the given file, in addition
    #                      to the default files terraform.tfvars and *.auto.tfvars.
    #                      Use this option more than once to include more than one
    #                      variables file.
    # -input=true         Ask for input for variables if not directly set.
    # -out=path           Write a plan file to the given path. This can be used as
    #                      input to the "apply" command.

    # plan_cache="plan.cache"
    # terraform "${@}" -input=false -out="${plan_cache}
    - gitlab-terraform plan -var-file=var_file

    # https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
    # terraform show -json "${plan_cache}" | jq -r "${JQ_PLAN}" > "${plan_json}"
    # terraform show: Show the current state or a saved plan
    # https://stedolan.github.io/jq/
    # jq- jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
    - gitlab-terraform plan-json -var-file=var_file

.plan.without.var.file:
  extends: .plan
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform --version
    - gitlab-terraform init
    - gitlab-terraform validate

    # -var-file=filename  Load variable values from the given file, in addition
    #                      to the default files terraform.tfvars and *.auto.tfvars.
    #                      Use this option more than once to include more than one
    #                      variables file.
    # -input=true         Ask for input for variables if not directly set.
    # -out=path           Write a plan file to the given path. This can be used as
    #                      input to the "apply" command.

    # plan_cache="plan.cache"
    # terraform "${@}" -input=false -out="${plan_cache}
    - gitlab-terraform plan

    # https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
    # terraform show -json "${plan_cache}" | jq -r "${JQ_PLAN}" > "${plan_json}"
    # terraform show: Show the current state or a saved plan
    # https://stedolan.github.io/jq/
    # jq- jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
    - gitlab-terraform plan-json


#============================#
# .apply                     #
#============================#
.apply:
  stage: deploy
  variables:
    TF_ROOT: ./
    TF_STATE_NAME: default
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl
#  before_script:
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
#    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

.apply.with.var.file:
  extends: .apply
  script:
    # plan_cache="plan.cache"
    # terraform "${@}" -input=false "${plan_cache}"
    - gitlab-terraform apply

.apply.without.var.file:
  extends: .apply
  script:
    - cd ${TF_ROOT}
    # plan_cache="plan.cache"
    # terraform "${@}" -input=false "${plan_cache}"
    - gitlab-terraform apply

#============================#
# .destroy                   #
#============================#
#.destroy:
#  stage: cleanup
#  variables:
#    TF_ROOT: ./
#    TF_STATE_NAME: default
#  cache:
#    key: "${TF_ROOT}"
#    paths:
#      - ${TF_ROOT}/.terraform/
#      - ${TF_ROOT}/.terraform.lock.hcl
##  before_script:
##    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
##    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
##    - cd ${TF_ROOT}
##    - cat $TERRAFORM_VAR_FILE_BASE64_DEV | base64 -d > var_file
#  script:
#    # terraform "${@}" -auto-approve
#    - gitlab-terraform destroy -var-file=var_file
#  resource_group: ${TF_STATE_NAME}
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#      when: manual

.destroy:
  stage: cleanup
  variables:
    TF_ROOT: ./
    TF_STATE_NAME: default
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl
  #  before_script:
  #    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
  #    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
  #    - cd ${TF_ROOT}
  #    - cat $TERRAFORM_VAR_FILE_BASE64_DEV | base64 -d > var_file

  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

.destroy.with.var.file:
  extends: .destroy
  script:
    # terraform "${@}" -auto-approve
    - gitlab-terraform destroy -var-file=var_file

.destroy.without.var.file:
  extends: .destroy
  script:
    - cd ${TF_ROOT}
    # terraform "${@}" -auto-approve
    - gitlab-terraform destroy


#===========================================================#
variables:
  DEV_RESOURCES_DIR: EnvDev/1-Resources
  DEV_RESOURCES_TF_STATE_NAME: "Dev-Resources"
  DEV_VPC_DIR: EnvDev/2-VPC
  DEV_VPC_TF_STATE_NAME: "Dev-VPC"
  DEV_GKE_DIR: EnvDev/3-GKE
  DEV_GKE_TF_STATE_NAME: "Dev-GKE"
  DEV_OP_DIR: EnvDev/4-OpApps
  DEV_OP_TF_STATE_NAME: "Dev-OpApps"

  QA_RES_DIR: EnvQA/1-Res
  QA_RES_TF_STATE_NAME: "QA-Res"
  QA_VPC_DIR: EnvQA/2-VPC
  QA_VPC_TF_STATE_NAME: "QA-VPC"
  QA_GKE_DIR: EnvQA/3-GKE
  QA_GKE_TF_STATE_NAME: "QA-GKE"
  QA_OP_DIR: EnvQA/4-OpApps
  QA_OP_TF_STATE_NAME: "QA-OpApps"

  PROD_VPC_DIR: EnvProd/1-VPC
  PROD_VPC_TF_STATE_NAME: "Prod-VPC"
  PROD_ASIA_EAST1_RES_DIR: EnvProd/AsiaEast1/1-Res
  PROD_ASIA_EAST1_RES_TF_STATE_NAME: "Prod-Asia-East1-Res"

# TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/sre-infra
# ${CI_API_V4_URL} = https://gitlab.com/api/v4
# ${CI_PROJECT_ID} = 27641226


#============================#
# Dev - Resources            #
#============================#
Dev-1-Res-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${DEV_RESOURCES_DIR}
    TF_STATE_NAME: ${DEV_RESOURCES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_RESOURCES_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-1-Res-Apply:
  extends: .apply.without.var.file
  needs: [Dev-1-Res-Plan]
  variables:
    TF_ROOT: ${DEV_RESOURCES_DIR}
    TF_STATE_NAME: ${DEV_RESOURCES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_RESOURCES_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-1-Res-Destroy:
  extends: .destroy.without.var.file
  needs: [Dev-1-Res-Plan]
  variables:
    TF_ROOT: ${DEV_RESOURCES_DIR}
    TF_STATE_NAME: ${DEV_RESOURCES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_RESOURCES_SERVICE_ACCOUNT_BASE64 | base64 -d)


#============================#
# Dev - VPC                  #
#============================#
Dev-2-VPC-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${DEV_VPC_DIR}
    TF_STATE_NAME: ${DEV_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-2-VPC-Apply:
  extends: .apply.without.var.file
  needs: [Dev-2-VPC-Plan]
  variables:
    TF_ROOT: ${DEV_VPC_DIR}
    TF_STATE_NAME: ${DEV_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-2-VPC-Destroy:
  extends: .destroy.without.var.file
  needs: [Dev-2-VPC-Plan]
  variables:
    TF_ROOT: ${DEV_VPC_DIR}
    TF_STATE_NAME: ${DEV_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)


#============================#
# Dev - GKE                  #
#============================#
Dev-3-GKE-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${DEV_GKE_DIR}
    TF_STATE_NAME: ${DEV_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-3-GKE-Apply:
  extends: .apply.without.var.file
  needs: [Dev-3-GKE-Plan]
  variables:
    TF_ROOT: ${DEV_GKE_DIR}
    TF_STATE_NAME: ${DEV_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-3-GKE-Destroy:
  extends: .destroy.without.var.file
  needs: [Dev-3-GKE-Plan]
  variables:
    TF_ROOT: ${DEV_GKE_DIR}
    TF_STATE_NAME: ${DEV_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)


#============================#
# Dev - OpApps               #
#============================#
Dev-4-OP-Plan:
  extends: .plan.with.var.file
  variables:
    TF_ROOT: ${DEV_OP_DIR}
    TF_STATE_NAME: ${DEV_OP_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_OP_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file

Dev-4-OP-Apply:
  extends: .apply.with.var.file
  needs: [Dev-4-OP-Plan]
  variables:
    TF_ROOT: ${DEV_OP_DIR}
    TF_STATE_NAME: ${DEV_OP_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_OP_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file

Dev-4-OP-Destroy:
  extends: .destroy.with.var.file
  needs: [Dev-4-OP-Plan]
  variables:
    TF_ROOT: ${DEV_OP_DIR}
    TF_STATE_NAME: ${DEV_OP_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_OP_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file


#============================#
# QA - Resources             #
#============================#
QA-1-Res-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_RES_DIR}
    TF_STATE_NAME: ${QA_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)

QA-1-Res-Apply:
  extends: .apply.without.var.file
  needs: [QA-1-Res-Plan]
  variables:
    TF_ROOT: ${QA_RES_DIR}
    TF_STATE_NAME: ${QA_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)

QA-1-Res-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-1-Res-Plan]
  variables:
    TF_ROOT: ${QA_RES_DIR}
    TF_STATE_NAME: ${QA_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)


#============================#
# QA - VPC                   #
#============================#
QA-2-VPC-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_VPC_DIR}
    TF_STATE_NAME: ${QA_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

QA-2-VPC-Apply:
  extends: .apply.without.var.file
  needs: [QA-2-VPC-Plan]
  variables:
    TF_ROOT: ${QA_VPC_DIR}
    TF_STATE_NAME: ${QA_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

QA-2-VPC-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-2-VPC-Plan]
  variables:
    TF_ROOT: ${QA_VPC_DIR}
    TF_STATE_NAME: ${QA_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)


#============================#
# QA - GKE                   #
#============================#
QA-3-GKE-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_GKE_DIR}
    TF_STATE_NAME: ${QA_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)

QA-3-GKE-Apply:
  extends: .apply.without.var.file
  needs: [QA-3-GKE-Plan]
  variables:
    TF_ROOT: ${QA_GKE_DIR}
    TF_STATE_NAME: ${QA_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)

QA-3-GKE-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-3-GKE-Plan]
  variables:
    TF_ROOT: ${QA_GKE_DIR}
    TF_STATE_NAME: ${QA_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)


#============================#
# QA - OpApps                #
#============================#
QA-4-OP-Plan:
  extends: .plan.with.var.file
  variables:
    TF_ROOT: ${QA_OP_DIR}
    TF_STATE_NAME: ${QA_OP_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_OP_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file

QA-4-OP-Apply:
  extends: .apply.with.var.file
  needs: [QA-4-OP-Plan]
  variables:
    TF_ROOT: ${QA_OP_DIR}
    TF_STATE_NAME: ${QA_OP_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_OP_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file

QA-4-OP-Destroy:
  extends: .destroy.with.var.file
  needs: [QA-4-OP-Plan]
  variables:
    TF_ROOT: ${QA_OP_DIR}
    TF_STATE_NAME: ${QA_OP_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_OP_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file






#============================#
# Prod - VPC                 #
#============================#
Prod-1-VPC-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${PROD_VPC_DIR}
    TF_STATE_NAME: ${PROD_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

Prod-1-VPC-Apply:
  extends: .apply.without.var.file
  needs: [Prod-1-VPC-Plan]
  variables:
    TF_ROOT: ${PROD_VPC_DIR}
    TF_STATE_NAME: ${PROD_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

Prod-1-VPC-Destroy:
  extends: .destroy.without.var.file
  needs: [Prod-1-VPC-Plan]
  variables:
    TF_ROOT: ${PROD_VPC_DIR}
    TF_STATE_NAME: ${PROD_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)



#===================================#
# Production Asia East1 - Resources #
#===================================#
Prod-Asia-East1-1-Res-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${PROD_ASIA_EAST1_RES_DIR}
    TF_STATE_NAME: ${PROD_ASIA_EAST1_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)

Prod-Asia-East1-1-Res-Apply:
  extends: .apply.without.var.file
  needs: [Prod-Asia-East1-1-Res-Plan]
  variables:
    TF_ROOT: ${PROD_ASIA_EAST1_RES_DIR}
    TF_STATE_NAME: ${PROD_ASIA_EAST1_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)

Prod-Asia-East1-1-Res-Destroy:
  extends: .destroy.without.var.file
  needs: [Prod-Asia-East1-1-Res-Plan]
  variables:
    TF_ROOT: ${PROD_ASIA_EAST1_RES_DIR}
    TF_STATE_NAME: ${PROD_ASIA_EAST1_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)







#============================#
# Production                 #
#============================#
#prod-plan:
#  extends: .plan
#  variables:
#    TF_ROOT: ${PROD_DIR}
#    TF_STATE_NAME: ${PROD_DIR}
#  before_script:
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
#    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
#    - cd ${TF_ROOT}
#    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#
#prod-apply:
#  extends: .apply
#  needs: [prod-plan]
#  variables:
#    TF_ROOT: ${PROD_DIR}
#    TF_STATE_NAME: ${PROD_DIR}
#  before_script:
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
#    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
#
#prod-destroy:
#  extends: .destroy
#  needs: [prod-plan]
#  variables:
#    TF_ROOT: ${PROD_DIR}
#    TF_STATE_NAME: ${PROD_DIR}
#  before_script:
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
#    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
#    - cd ${TF_ROOT}
#    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file






