#include:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform.gitlab-ci.yml
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform/Base.latest.gitlab-ci.yml
# https://gitlab.com/gitlab-org/terraform-images
# https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
#  - template: Terraform.gitlab-ci.yml

stages:
  - Security
  - plan
  - deploy
  - cleanup

include:
  - local: ".gitlab-ci-template.yml"

#TrivyScan-EnvSRE:
#  extends: .TrivyScanTemplate
#  variables:
#    SCAN_PATH: EnvSRE
#    REPORT_FILE: ReportSRE.txt
#  
#TrivyScan-Tools:
#  extends: .TrivyScanTemplate
#  variables:
#    SCAN_PATH: tools
#    REPORT_FILE: ReportTools.txt
#
#TrivyScan-Modules:
#  extends: .TrivyScanTemplate
#  variables:
#    SCAN_PATH: Modules
#    REPORT_FILE: ReportModules.txt



# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Terraform/Base.latest.gitlab-ci.yml
# Terraform/Base.latest
#
# The purpose of this template is to provide flexibility to the user so
# they are able to only include the jobs that they find interesting.
#
# Therefore, this template is not supposed to run any jobs. The idea is to only
# create hidden jobs. See: https://docs.gitlab.com/ee/ci/yaml/#hide-jobs
#
# There is a more opinionated template which we suggest the users to abide,
# which is the lib/gitlab/ci/templates/Terraform.latest.gitlab-ci.yml

image:
  # https://gitlab.com/gitlab-org/terraform-images/container_registry/2018822
  name: registry.gitlab.com/gitlab-org/terraform-images/releases/1.0:v0.31.0
#  name: registry.gitlab.com/gitlab-org/terraform-images/releases/1.0:latest

#============================#
# .plan                      #
#============================#
#.plan:
#  stage: plan
#  variables:
#    TF_ROOT: ./
#    TF_STATE_NAME: default
#  cache:
#    key: "${TF_ROOT}"
#    paths:
#      - ${TF_ROOT}/.terraform/
#      - ${TF_ROOT}/.terraform.lock.hcl
##  before_script:
##    - cd ${TF_ROOT}
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
##    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
##    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#  script:
#    - gitlab-terraform --version
#    - gitlab-terraform init
#    - gitlab-terraform validate
#
#    # -var-file=filename  Load variable values from the given file, in addition
#    #                      to the default files terraform.tfvars and *.auto.tfvars.
#    #                      Use this option more than once to include more than one
#    #                      variables file.
#    # -input=true         Ask for input for variables if not directly set.
#    # -out=path           Write a plan file to the given path. This can be used as
#    #                      input to the "apply" command.
#
#    # plan_cache="plan.cache"
#    # terraform "${@}" -input=false -out="${plan_cache}
#    - gitlab-terraform plan -var-file=var_file
#
#    # https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
#    # terraform show -json "${plan_cache}" | jq -r "${JQ_PLAN}" > "${plan_json}"
#    # terraform show: Show the current state or a saved plan
#    # https://stedolan.github.io/jq/
#    # jq- jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
#    - gitlab-terraform plan-json -var-file=var_file
#  resource_group: ${TF_STATE_NAME}
#  artifacts:
#    paths:
#      # The [gitlab-terraform plan] creates this file.
#      - ${TF_ROOT}/plan.cache
#    reports:
#      # The [gitlab-terraform plan-json] creates this file.
#      terraform: ${TF_ROOT}/plan.json
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#      when: manual


.plan:
  stage: plan
  variables:
    TF_ROOT: ./
    TF_STATE_NAME: default
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl
    #  before_script:
    #    - cd ${TF_ROOT}
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
  #    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
  #    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      # The [gitlab-terraform plan] creates this file.
      - ${TF_ROOT}/plan.cache
    reports:
      # The [gitlab-terraform plan-json] creates this file.
      terraform: ${TF_ROOT}/plan.json
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual


.plan.with.var.file:
  extends: .plan
  script:
    - gitlab-terraform --version
    - gitlab-terraform init
    - gitlab-terraform validate

    # -var-file=filename  Load variable values from the given file, in addition
    #                      to the default files terraform.tfvars and *.auto.tfvars.
    #                      Use this option more than once to include more than one
    #                      variables file.
    # -input=true         Ask for input for variables if not directly set.
    # -out=path           Write a plan file to the given path. This can be used as
    #                      input to the "apply" command.

    # plan_cache="plan.cache"
    # terraform "${@}" -input=false -out="${plan_cache}
    - gitlab-terraform plan -var-file=var_file

    # https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
    # terraform show -json "${plan_cache}" | jq -r "${JQ_PLAN}" > "${plan_json}"
    # terraform show: Show the current state or a saved plan
    # https://stedolan.github.io/jq/
    # jq- jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
    - gitlab-terraform plan-json -var-file=var_file

.plan.without.var.file:
  extends: .plan
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform --version
    - gitlab-terraform init
    - gitlab-terraform validate

    # -var-file=filename  Load variable values from the given file, in addition
    #                      to the default files terraform.tfvars and *.auto.tfvars.
    #                      Use this option more than once to include more than one
    #                      variables file.
    # -input=true         Ask for input for variables if not directly set.
    # -out=path           Write a plan file to the given path. This can be used as
    #                      input to the "apply" command.

    # plan_cache="plan.cache"
    # terraform "${@}" -input=false -out="${plan_cache}
    - gitlab-terraform plan

    # https://gitlab.com/gitlab-org/terraform-images/-/blob/master/src/bin/gitlab-terraform.sh
    # terraform show -json "${plan_cache}" | jq -r "${JQ_PLAN}" > "${plan_json}"
    # terraform show: Show the current state or a saved plan
    # https://stedolan.github.io/jq/
    # jq- jq is like sed for JSON data - you can use it to slice and filter and map and transform structured data with the same ease that sed, awk, grep and friends let you play with text.
    - gitlab-terraform plan-json


#============================#
# .apply                     #
#============================#
.apply:
  stage: deploy
  variables:
    TF_ROOT: ./
    TF_STATE_NAME: default
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl
#  before_script:
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
#    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

.apply.with.var.file:
  extends: .apply
  script:
    # plan_cache="plan.cache"
    # terraform "${@}" -input=false "${plan_cache}"
    - gitlab-terraform apply

.apply.without.var.file:
  extends: .apply
  script:
    - cd ${TF_ROOT}
    # plan_cache="plan.cache"
    # terraform "${@}" -input=false "${plan_cache}"
    - gitlab-terraform apply

#============================#
# .destroy                   #
#============================#
#.destroy:
#  stage: cleanup
#  variables:
#    TF_ROOT: ./
#    TF_STATE_NAME: default
#  cache:
#    key: "${TF_ROOT}"
#    paths:
#      - ${TF_ROOT}/.terraform/
#      - ${TF_ROOT}/.terraform.lock.hcl
##  before_script:
##    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
##    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
##    - cd ${TF_ROOT}
##    - cat $TERRAFORM_VAR_FILE_BASE64_DEV | base64 -d > var_file
#  script:
#    # terraform "${@}" -auto-approve
#    - gitlab-terraform destroy -var-file=var_file
#  resource_group: ${TF_STATE_NAME}
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#      when: manual

.destroy:
  stage: cleanup
  variables:
    TF_ROOT: ./
    TF_STATE_NAME: default
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl
  #  before_script:
  #    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
  #    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_INFRA_SERVICE_ACCOUNT_BASE64 | base64 -d)
  #    - cd ${TF_ROOT}
  #    - cat $TERRAFORM_VAR_FILE_BASE64_DEV | base64 -d > var_file

  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

.destroy.with.var.file:
  extends: .destroy
  script:
    # terraform "${@}" -auto-approve
    - gitlab-terraform destroy -var-file=var_file

.destroy.without.var.file:
  extends: .destroy
  script:
    - cd ${TF_ROOT}
    # terraform "${@}" -auto-approve
    - gitlab-terraform destroy


#===========================================================#
variables:
  DEV_RES_DIR: EnvDev/1-Res
  DEV_RES_TF_STATE_NAME: "Dev-Resources"
  DEV_VPC_DIR: EnvDev/2-VPC
  DEV_VPC_TF_STATE_NAME: "Dev-VPC"
  DEV_DB_DIR: EnvDev/3-Database
  DEV_DB_TF_STATE_NAME: "Dev-Database"
  DEV_GKE_DIR: EnvDev/4-GKE
  DEV_GKE_TF_STATE_NAME: "Dev-GKE"
  DEV_APPS_DIR: EnvDev/5-Apps
  DEV_APPS_TF_STATE_NAME: "Dev-Apps"

  QA_RES_DIR: EnvQA/1-Res
  QA_RES_TF_STATE_NAME: "QA-Res"
  QA_VPC_DIR: EnvQA/2-VPC
  QA_VPC_TF_STATE_NAME: "QA-VPC"
  QA_DB_DIR: EnvQA/3-Database
  QA_DB_TF_STATE_NAME: "QA-DB"
  QA_GKE_DIR: EnvQA/4-GKE
  QA_GKE_TF_STATE_NAME: "QA-GKE"
  QA_APPS_DIR: EnvQA/5-Apps
  QA_APPS_TF_STATE_NAME: "QA-Apps"
  QA_GKE_EU_DIR: EnvQA/6-GKE-EU
  QA_GKE_EU_TF_STATE_NAME: "QA-GKE-EU"
  QA_APPS_EU_DIR: EnvQA/7-Apps-EU
  QA_APPS_EU_TF_STATE_NAME: "QA-Apps-EU"
  QA_LB_DIR: EnvQA/8-LoadBalancer
  QA_LB_TF_STATE_NAME: "QA-LB"
  
  PROD_REVIEW_RES_DIR: EnvProdReview/1-Res
  PROD_REVIEW_RES_TF_STATE_NAME: "Prod-Review-Res"
  PROD_REVIEW_VPC_DIR: EnvProdReview/2-VPC
  PROD_REVIEW_VPC_TF_STATE_NAME: "Prod-Review-VPC"
  PROD_REVIEW_DB_DIR: EnvProdReview/3-Database
  PROD_REVIEW_DB_TF_STATE_NAME: "Prod-Review-DB"
  PROD_REVIEW_GKE_DIR: EnvProdReview/4-GKE
  PROD_REVIEW_GKE_TF_STATE_NAME: "Prod-Review-GKE"
  PROD_REVIEW_APPS_DIR: EnvProdReview/5-Apps
  PROD_REVIEW_APPS_TF_STATE_NAME: "Prod-Review-Apps"
  PROD_REVIEW_GKE_GLOBAL_DIR: EnvProdReview/6-GKE-Global
  PROD_REVIEW_GKE_GLOBAL_TF_STATE_NAME: "Prod-Review-GKE-Global"
  PROD_REVIEW_APPS_GLOBAL_DIR: EnvProdReview/7-Apps-Global
  PROD_REVIEW_APPS_GLOBAL_TF_STATE_NAME: "Prod-Review-Apps-Global"
  PROD_REVIEW_LB_DIR: EnvProdReview/8-LoadBalancer
  PROD_REVIEW_LB_TF_STATE_NAME: "Prod-Review-LB"

#  PROD_VPC_DIR: EnvProd/1-VPC
#  PROD_VPC_TF_STATE_NAME: "Prod-VPC"
#
#  PROD_ASIA_RES_DIR: EnvProd/AsiaEast1/2-Res
#  PROD_ASIA_RES_TF_STATE_NAME: "Prod-Res-AsiaEast1"
#  PROD_ASIA_GKE_DIR: EnvProd/AsiaEast1/3-GKE
#  PROD_ASIA_GKE_TF_STATE_NAME: "Prod-GKE-AsiaEast1"
#  PROD_ASIA_APPS_DIR: EnvProd/AsiaEast1/4-Apps
#  PROD_ASIA_APPS_TF_STATE_NAME: "Prod-Apps-AsiaEast1"
#
#  PROD_EUROPE_RES_DIR: EnvProd/EuropeWest2/2-Res
#  PROD_EUROPE_RES_TF_STATE_NAME: "Prod-Res-EuropeWest2"
#  PROD_EUROPE_GKE_DIR: EnvProd/EuropeWest2/3-GKE
#  PROD_EUROPE_GKE_TF_STATE_NAME: "Prod-GKE-EuropeWest2"
#  PROD_APPS_DIR_EU: EnvProd/EuropeWest2/4-Apps
#  PROD_APPS_TF_STATE_NAME_EU: "Prod-Apps-EuropeWest2"
#
#  PROD_US_RES_DIR: EnvProd/USCentral1/2-Res
#  PROD_US_RES_TF_STATE_NAME: "Prod-Res-USCentral1"
#  PROD_US_GKE_DIR: EnvProd/USCentral1/3-GKE
#  PROD_US_GKE_TF_STATE_NAME: "Prod-GKE-USCentral1"
#  PROD_APPS_DIR_US: EnvProd/USCentral1/4-Apps
#  PROD_APPS_TF_STATE_NAME_US: "Prod-Apps-USCentral1"

# TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/sre-infra
# ${CI_API_V4_URL} = https://gitlab.com/api/v4
# ${CI_PROJECT_ID} = 27641226


#============================#
# Dev - Resources            #
#============================#
Dev-1-Res-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${DEV_RES_DIR}
    TF_STATE_NAME: ${DEV_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-1-Res-Apply:
  extends: .apply.without.var.file
  needs: [Dev-1-Res-Plan]
  variables:
    TF_ROOT: ${DEV_RES_DIR}
    TF_STATE_NAME: ${DEV_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-1-Res-Destroy:
  extends: .destroy.without.var.file
  needs: [Dev-1-Res-Plan]
  variables:
    TF_ROOT: ${DEV_RES_DIR}
    TF_STATE_NAME: ${DEV_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)

#============================#
# Dev - VPC                  #
#============================#
Dev-2-VPC-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${DEV_VPC_DIR}
    TF_STATE_NAME: ${DEV_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-2-VPC-Apply:
  extends: .apply.without.var.file
  needs: [Dev-2-VPC-Plan]
  variables:
    TF_ROOT: ${DEV_VPC_DIR}
    TF_STATE_NAME: ${DEV_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

Dev-2-VPC-Destroy:
  extends: .destroy.without.var.file
  needs: [Dev-2-VPC-Plan]
  variables:
    TF_ROOT: ${DEV_VPC_DIR}
    TF_STATE_NAME: ${DEV_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)

#============================#
# Dev - Database             #
#============================#
Dev-3-Database-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${DEV_DB_DIR}
    TF_STATE_NAME: ${DEV_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_DB_SERVICE_ACCOUNT_BASE64 | base64 -d)
  tags:
    - g1

Dev-3-Database-Apply:
  extends: .apply.without.var.file
  needs: [Dev-3-Database-Plan]
  variables:
    TF_ROOT: ${DEV_DB_DIR}
    TF_STATE_NAME: ${DEV_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_DB_SERVICE_ACCOUNT_BASE64 | base64 -d)
  tags:
    - g1

Dev-3-Database-Destroy:
  extends: .destroy.without.var.file
  needs: [Dev-3-Database-Plan]
  variables:
    TF_ROOT: ${DEV_DB_DIR}
    TF_STATE_NAME: ${DEV_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_DB_SERVICE_ACCOUNT_BASE64 | base64 -d)
  tags:
    - g1

#============================#
# Dev - GKE                  #
#============================#
Dev-4-GKE-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${DEV_GKE_DIR}
    TF_STATE_NAME: ${DEV_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  tags:
    - g1

Dev-4-GKE-Apply:
  extends: .apply.without.var.file
  needs: [Dev-4-GKE-Plan]
  variables:
    TF_ROOT: ${DEV_GKE_DIR}
    TF_STATE_NAME: ${DEV_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  tags:
    - g1

Dev-4-GKE-Destroy:
  extends: .destroy.without.var.file
  needs: [Dev-4-GKE-Plan]
  variables:
    TF_ROOT: ${DEV_GKE_DIR}
    TF_STATE_NAME: ${DEV_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  tags:
    - g1

#============================#
# Dev - Apps                 #
#============================#
Dev-5-Apps-Plan:
  extends: .plan.with.var.file
  variables:
    TF_ROOT: ${DEV_APPS_DIR}
    TF_STATE_NAME: ${DEV_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file

Dev-5-Apps-Apply:
  extends: .apply.with.var.file
  needs: [Dev-5-Apps-Plan]
  variables:
    TF_ROOT: ${DEV_APPS_DIR}
    TF_STATE_NAME: ${DEV_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file

Dev-5-Apps-Destroy:
  extends: .destroy.with.var.file
  needs: [Dev-5-Apps-Plan]
  variables:
    TF_ROOT: ${DEV_APPS_DIR}
    TF_STATE_NAME: ${DEV_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $DEV_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $DEV_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file

#============================#
# QA - Resources             #
#============================#
QA-1-Res-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_RES_DIR}
    TF_STATE_NAME: ${QA_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-1-Res-Apply:
  extends: .apply.without.var.file
  needs: [QA-1-Res-Plan]
  variables:
    TF_ROOT: ${QA_RES_DIR}
    TF_STATE_NAME: ${QA_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-1-Res-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-1-Res-Plan]
  variables:
    TF_ROOT: ${QA_RES_DIR}
    TF_STATE_NAME: ${QA_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

#============================#
# QA - VPC                   #
#============================#
QA-2-VPC-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_VPC_DIR}
    TF_STATE_NAME: ${QA_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-2-VPC-Apply:
  extends: .apply.without.var.file
  needs: [QA-2-VPC-Plan]
  variables:
    TF_ROOT: ${QA_VPC_DIR}
    TF_STATE_NAME: ${QA_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-2-VPC-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-2-VPC-Plan]
  variables:
    TF_ROOT: ${QA_VPC_DIR}
    TF_STATE_NAME: ${QA_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

#============================#
# QA - Database              #
#============================#
QA-3-DB-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_DB_DIR}
    TF_STATE_NAME: ${QA_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_DB_SA_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1

QA-3-DB-Apply:
  extends: .apply.without.var.file
  needs: [QA-3-DB-Plan]
  variables:
    TF_ROOT: ${QA_DB_DIR}
    TF_STATE_NAME: ${QA_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_DB_SA_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1

QA-3-DB-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-3-DB-Plan]
  variables:
    TF_ROOT: ${QA_DB_DIR}
    TF_STATE_NAME: ${QA_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_DB_SA_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1

#============================#
# QA - GKE                   #
#============================#
QA-4-GKE-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_GKE_DIR}
    TF_STATE_NAME: ${QA_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1

QA-4-GKE-Apply:
  extends: .apply.without.var.file
  needs: [QA-4-GKE-Plan]
  variables:
    TF_ROOT: ${QA_GKE_DIR}
    TF_STATE_NAME: ${QA_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1

QA-4-GKE-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-4-GKE-Plan]
  variables:
    TF_ROOT: ${QA_GKE_DIR}
    TF_STATE_NAME: ${QA_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1

#============================#
# QA - Apps                  #
#============================#
QA-5-Apps-Plan:
  extends: .plan.with.var.file
  variables:
    TF_ROOT: ${QA_APPS_DIR}
    TF_STATE_NAME: ${QA_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-5-Apps-Apply:
  extends: .apply.with.var.file
  needs: [QA-5-Apps-Plan]
  variables:
    TF_ROOT: ${QA_APPS_DIR}
    TF_STATE_NAME: ${QA_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-5-Apps-Destroy:
  extends: .destroy.with.var.file
  needs: [QA-5-Apps-Plan]
  variables:
    TF_ROOT: ${QA_APPS_DIR}
    TF_STATE_NAME: ${QA_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual


#============================#
# QA - GKE(EU)               #
#============================#
QA-6-GKE-EU-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_GKE_EU_DIR}
    TF_STATE_NAME: ${QA_GKE_EU_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1

QA-6-GKE-EU-Apply:
  extends: .apply.without.var.file
  needs: [QA-6-GKE-EU-Plan]
  variables:
    TF_ROOT: ${QA_GKE_EU_DIR}
    TF_STATE_NAME: ${QA_GKE_EU_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1

QA-6-GKE-EU-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-6-GKE-EU-Plan]
  variables:
    TF_ROOT: ${QA_GKE_EU_DIR}
    TF_STATE_NAME: ${QA_GKE_EU_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual
  tags:
    - g1



#============================#
# QA - Apps(EU)              #
#============================#
QA-7-Apps-EU-Plan:
  extends: .plan.with.var.file
  variables:
    TF_ROOT: ${QA_APPS_EU_DIR}
    TF_STATE_NAME: ${QA_APPS_EU_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-7-Apps-EU-Apply:
  extends: .apply.with.var.file
  needs: [QA-7-Apps-EU-Plan]
  variables:
    TF_ROOT: ${QA_APPS_EU_DIR}
    TF_STATE_NAME: ${QA_APPS_EU_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-7-Apps-EU-Destroy:
  extends: .destroy.with.var.file
  needs: [QA-7-Apps-EU-Plan]
  variables:
    TF_ROOT: ${QA_APPS_EU_DIR}
    TF_STATE_NAME: ${QA_APPS_EU_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual


#============================#
# QA - LoadBalancer          #
#============================#
QA-8-LB-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${QA_LB_DIR}
    TF_STATE_NAME: ${QA_LB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_LB_SA_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-8-LB-Apply:
  extends: .apply.without.var.file
  needs: [QA-8-LB-Plan]
  variables:
    TF_ROOT: ${QA_LB_DIR}
    TF_STATE_NAME: ${QA_LB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_LB_SA_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual

QA-8-LB-Destroy:
  extends: .destroy.without.var.file
  needs: [QA-8-LB-Plan]
  variables:
    TF_ROOT: ${QA_LB_DIR}
    TF_STATE_NAME: ${QA_LB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_LB_SA_BASE64 | base64 -d)
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
      when: manual






#============================#
# QA - Cloud Run             #
#============================#
#QA-6-CloudRun-Plan:
#  extends: .plan.without.var.file
#  variables:
#    TF_ROOT: ${QA_CLOUD_RUN_DIR}
#    TF_STATE_NAME: ${QA_CLOUD_RUN_TF_STATE_NAME}
#  before_script:
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
#    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_CLOUD_RUN_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
#
#QA-6-CloudRun-Apply:
#  extends: .apply.without.var.file
#  needs: [QA-6-CloudRun-Plan]
#  variables:
#    TF_ROOT: ${QA_CLOUD_RUN_DIR}
#    TF_STATE_NAME: ${QA_CLOUD_RUN_TF_STATE_NAME}
#  before_script:
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
#    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_CLOUD_RUN_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
#
#QA-6-CloudRun-Destroy:
#  extends: .destroy.without.var.file
#  needs: [QA-6-CloudRun-Plan]
#  variables:
#    TF_ROOT: ${QA_CLOUD_RUN_DIR}
#    TF_STATE_NAME: ${QA_CLOUD_RUN_TF_STATE_NAME}
#  before_script:
#    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
#    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_CLOUD_RUN_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual



#=============================#
# Prod(Review) - Resources    #
#=============================#
Prod-Review-1-Res-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${PROD_REVIEW_RES_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-1-Res-Apply:
  extends: .apply.without.var.file
  needs: [Prod-Review-1-Res-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_RES_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-1-Res-Destroy:
  extends: .destroy.without.var.file
  needs: [Prod-Review-1-Res-Plan]
  variables:
    TF_ROOT: ${PROD_VPC_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_RES_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_RES_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual




#============================#
# Prod(Review) - VPC         #
#============================#
Prod-Review-2-VPC-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${PROD_REVIEW_VPC_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-2-VPC-Apply:
  extends: .apply.without.var.file
  needs: [Prod-Review-2-VPC-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_VPC_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-2-VPC-Destroy:
  extends: .destroy.without.var.file
  needs: [Prod-Review-2-VPC-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_VPC_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_VPC_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_VPC_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual


#============================#
# Prod(Review) - Database    #
#============================#
Prod-Review-3-DB-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${PROD_REVIEW_DB_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_DB_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1

Prod-Review-3-DB-Apply:
  extends: .apply.without.var.file
  needs: [Prod-Review-3-DB-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_DB_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_DB_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1

Prod-Review-3-DB-Destroy:
  extends: .destroy.without.var.file
  needs: [Prod-Review-3-DB-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_DB_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_DB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_DB_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1



#============================#
# Prod(Review) - GKE         #
#============================#
Prod-Review-4-GKE-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${PROD_REVIEW_GKE_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1

Prod-Review-4-GKE-Apply:
  extends: .apply.without.var.file
  needs: [Prod-Review-4-GKE-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_GKE_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1

Prod-Review-4-GKE-Destroy:
  extends: .destroy.without.var.file
  needs: [Prod-Review-4-GKE-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_GKE_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_GKE_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1




#============================#
# Prod(Review) - Apps        #
#============================#
Prod-Review-5-Apps-Plan:
  extends: .plan.with.var.file
  variables:
    TF_ROOT: ${PROD_REVIEW_APPS_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-5-Apps-Apply:
  extends: .apply.with.var.file
  needs: [Prod-Review-5-Apps-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_APPS_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-5-Apps-Destroy:
  extends: .destroy.with.var.file
  needs: [Prod-Review-5-Apps-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_APPS_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_APPS_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual


#============================#
# QA - GKE(Global)           #
#============================#
Prod-Review-6-GKE-Global-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${PROD_REVIEW_GKE_GLOBAL_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_GKE_GLOBAL_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1

Prod-Review-6-GKE-Global-Apply:
  extends: .apply.without.var.file
  needs: [Prod-Review-6-GKE-Global-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_GKE_GLOBAL_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_GKE_GLOBAL_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1

Prod-Review-6-GKE-Global-Destroy:
  extends: .destroy.without.var.file
  needs: [Prod-Review-6-GKE-Global-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_GKE_GLOBAL_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_GKE_GLOBAL_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_GKE_SERVICE_ACCOUNT_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual
  tags:
    - g1


#=============================#
# Prod(Review) - Apps(Global) #
#=============================#
Prod-Review-7-Apps-Global-Plan:
  extends: .plan.with.var.file
  variables:
    TF_ROOT: ${PROD_REVIEW_APPS_GLOBAL_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_APPS_GLOBAL_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-7-Apps-Global-Apply:
  extends: .apply.with.var.file
  needs: [Prod-Review-7-Apps-Global-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_APPS_GLOBAL_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_APPS_GLOBAL_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-7-Apps-Global-Destroy:
  extends: .destroy.with.var.file
  needs: [Prod-Review-7-Apps-Global-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_APPS_GLOBAL_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_APPS_GLOBAL_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_APPS_SERVICE_ACCOUNT_BASE64 | base64 -d)
    - cd ${TF_ROOT}
    - cat $PROD_TERRAFORM_VAR_FILE_BASE64 | base64 -d > var_file
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual


#==============================#
# Prod(Review) - LoadBalancer  #
#==============================#
Prod-Review-8-LB-Plan:
  extends: .plan.without.var.file
  variables:
    TF_ROOT: ${PROD_REVIEW_LB_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_LB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_LB_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-8-LB-Apply:
  extends: .apply.without.var.file
  needs: [Prod-Review-8-LB-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_LB_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_LB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_LB_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual

Prod-Review-8-LB-Destroy:
  extends: .destroy.without.var.file
  needs: [Prod-Review-8-LB-Plan]
  variables:
    TF_ROOT: ${PROD_REVIEW_LB_DIR}
    TF_STATE_NAME: ${PROD_REVIEW_LB_TF_STATE_NAME}
  before_script:
    # https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#full-reference
    - export GOOGLE_CLOUD_KEYFILE_JSON=$(cat $PROD_LB_SA_BASE64 | base64 -d)
#  rules:
#    - if: $CI_COMMIT_TAG # Run this job when a tag is created manually.
#      when: manual



