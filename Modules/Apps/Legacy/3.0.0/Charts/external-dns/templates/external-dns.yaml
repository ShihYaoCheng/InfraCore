apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get","watch","list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get","watch","list"]
  - apiGroups: ["extensions","networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get","watch","list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list","watch"]
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get","watch","list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
        - name: external-dns
{{/*          image: k8s.gcr.io/external-dns/external-dns:v0.8.0*/}}
          image: "{{- .Values.image.name }}:{{ default .Chart.AppVersion .Values.image.tag -}}"
          args:
            - --source=service # ingress is also possible
            - --domain-filter={{ .Values.domain.filter }} # (optional) limit to only example.com domains; change to match the zone created above.
            - --provider=godaddy
#            - --txt-prefix=external-dns. # In case of multiple k8s cluster
#            - --txt-owner-id=owner-id # In case of multiple k8s cluster
            - --godaddy-api-key={{ required "You should provide api key of godaddy." .Values.godaddy.api.key }}
            - --godaddy-api-secret={{ required "You should provide api secret of godady." .Values.godaddy.api.secret }}